












package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;

/**
 * This file contains an minimal example of a Linear "OpMode". An OpMode is a 'program' that runs in either
 * the autonomous or the teleop period of an FTC match. The names of OpModes appear on the menu
 * of the FTC Driver Station. When an selection is made from the menu, the corresponding OpMode
 * class is instantiated on the Robot Controller and executed.
 *
 * This particular OpMode just executes a basic Tank Drive Teleop for a two wheeled robot
 * It includes all the skeletal structure that all linear OpModes contain.
 *
 * Use Android Studios to Copy this Class, and Paste it into your team's code folder with a new name.
 * Remove or comment out the @Disabled line to add this opmode to the Driver Station OpMode list
 */

@Autonomous(name="BasicAutonomousMode", group="Linear Opmode")
//@Disabled
public class BasicAutonomousMode extends LinearOpMode {

    // Declare OpMode members.
    private ElapsedTime runtime = new ElapsedTime();

    @Override
    public void runOpMode() {
        telemetry.addData("Status", "Initialized");
        telemetry.update();
        DcMotor leftDrive = hardwareMap.get(DcMotor.class, "left_drive");
        DcMotor rightDrive = hardwareMap.get(DcMotor.class, "right_drive");
        DcMotor armMotor = hardwareMap.get(DcMotor.class, "arm_lift");
        Servo servo = hardwareMap.get(Servo.class, "ar");
        Servo scoopServo = hardwareMap.get(Servo.class, "scoop_servo");
        leftDrive.setDirection(DcMotor.Direction.FORWARD);
        rightDrive.setDirection(DcMotor.Direction.REVERSE);
        scoopServo.setPosition(0); // working under the assumption that closed is 0
        servo.setPosition(.5); // keep the ar at a position that holds Wilson2.0 up.
        waitForStart();
        runtime.reset();
        // Notes.1 make two autonomous programs, depending on which side of the lander we are facing
        // Must set arm motor power to get off of the lander and
        // then possibly turn the robot depending on how it lands, starting towards the sampling
        // (to jiggle out of the latch) right up, both back, left up

        // Notes.2 maybe take one of the jiggle movements out since the hook is able to go out at an angle
        // maybe just have one wide left turn, back it up, and then straighten out the robot
        // (depending on how much give the hook gives us)

        servo.setPosition(1);  // release the body of Wilson to drop down to the floor.
        armMotor.setPower(.6); // keep the arm powered so the body doesn't slam the floor.

        while (getRuntime() < 2){} // let it drop for two seconds. (that should be fine)

        armMotor.setPower(0); // kill the arm power
        leftDrive.setPower(-.5);
        rightDrive.setPower(.5); // jerk the body to get the arm free.

        while (getRuntime() < 3) {} // for 1 second
        leftDrive.setPower(.3);
        rightDrive.setPower(-.3); // reverse jerk it to loosen up anything that was stuck.

        while (getRuntime() < 3.25) {}
        leftDrive.setPower(-.5);
        rightDrive.setPower(.5); // continue to jerk free.  This should put us at an angled position relative to the lander.

        while (getRuntime() < 4) {}
        leftDrive.setPower(-.3);
        rightDrive.setPower(-.3); // back it up.

        while (getRuntime() < 5) {}
        leftDrive.setPower(.3);
        rightDrive.setPower(-.3); // straighten out the robot so we're square with the lander.

        while (getRuntime() < 6) {} // now we should be free of the lander.  We should probably back up.
        leftDrive.setPower(-.5);
        rightDrive.setPower(.5);   

        while (getRuntime() < 9) {} // for 3 seconds
        scoopServo.setPosition(.5); // this is open if 0 is closed
        leftDrive.setPower(1);
        rightDrive.setPower(1); // hard jerk to shake the marker out.
        while (getRuntime() < 9.5) {}
        leftDrive.setPower(-.1);
        rightDrive.setPower(-.1); // slowly push the marker towards depot.

        while (getRuntime() < 10) {}
        scoopServo.setPosition(0);  // reset the scoop servo while the marker is rolling

        while (getRuntime() < 12) {}
        leftDrive.setPower(0);
        rightDrive.setPower(0); // stop everything





        // we need to make separate modes for the two sides of the lander, and then possibly more
        // for compatibility with other teams' autonomous modes.




    }
}

