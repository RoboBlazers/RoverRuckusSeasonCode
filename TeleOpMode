/* This code is for the 2018 FTC Rover Ruckus game Tele-Op Mode.  It will enable team 13649's robot Wilson2.0 to 
1) drive and turn 2) raise and lower his arm 3) control a secondary, servo-controlled, fold-able arm extension.
Any onlooking teams are by all means allowed to use the following code for learning purposes.
However, copying code for game use is discouraged since no team will learn by copying others' work.
*/
/* Copyright (c) 2017 FIRST. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted (subject to the limitations in the disclaimer below) provided that
 * the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * Neither the name of FIRST nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
 * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
// a is the highest the servo can go
// the range of a servo is 0 to 90, 90 being the highest

//
package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;


/**
 * This file contains an minimal example of a Linear "OpMode". An OpMode is a 'program' that runs in either
 * the autonomous or the teleop period of an FTC match. The names of OpModes appear on the menu
 * of the FTC Driver Station. When an selection is made from the menu, the corresponding OpMode
 * class is instantiated on the Robot Controller and executed.
 *
 * This particular OpMode just executes a basic Tank Drive Teleop for a two wheeled robot
 * It includes all the skeletal structure that all linear OpModes contain.
 *
 * Use Android Studios to Copy this Class, and Paste it into your team's code folder with a new name.
 * Remove or comment out the @Disabled line to add this opmode to the Driver Station OpMode list
 */

@TeleOp(name="THIS IS THE RIGHT ONE", group="Linear Opmode")
//@Disabled
public class TeleOpMode extends LinearOpMode {

    // Declare OpMode members.
    private ElapsedTime runtime = new ElapsedTime();

    @Override
    public void runOpMode() {
        telemetry.addData("Status", "Initialized");
        telemetry.update();

        // Initialize the hardware variables. Note that the strings used here as parameters
        // to 'get' must correspond to the names assigned during the robot configuration
        // step (using the FTC Robot Controller app on the phone).
        DcMotor leftDrive = hardwareMap.get(DcMotor.class, "left_drive");
        DcMotor rightDrive = hardwareMap.get(DcMotor.class, "right_drive");
        DcMotor armMotor = hardwareMap.get(DcMotor.class, "arm_lift");
        Servo servo = hardwareMap.get(Servo.class, "ar");
        Servo scoopServo = hardwareMap.get(Servo.class, "scoop_servo");

        // Most robots need the motor on one side to be reversed to drive forward
        // Reverse the motor that runs backwards when connected directly to the battery
        rightDrive.setDirection(DcMotor.Direction.FORWARD);
        leftDrive.setDirection(DcMotor.Direction.REVERSE);
        armMotor.setDirection(DcMotor.Direction.FORWARD);

        // Wait for the game to start (driver presses PLAY)
        waitForStart();
        runtime.reset();

        // run until the end of the match (driver presses STOP)
        while (opModeIsActive()) {

            // Setup a variable for each drive wheel to save power level for telemetry
            double leftPower;
            double rightPower;
            double armPower;

            // Choose to drive using either Tank Mode, or POV Mode
            // Comment out the method that's not used.  The default below is POV.

            // POV Mode uses left stick to go forward, and right stick to turn.
            // - This uses basic math to combine motions and is easier to drive straight.
            // arm is the primary arm, ar is the secondary arm (the one controlled by the servo)
            // and its called ar because it is shorter than the arm -Derrick
            double turn = -gamepad1.left_stick_y;
            double drive = gamepad1.right_stick_x;
            double arm = -gamepad2.left_stick_y;
            double ar = 0;
            boolean open = false;




            if (gamepad1.right_bumper) {
                leftPower = Range.clip( (drive / 4 + turn), -1.0, 1.0);
                rightPower = Range.clip( (drive / 4 - turn), -1.0, 1.0);
            } else {
                leftPower = Range.clip(drive + (turn / 2), -1.0, 1.0);
                rightPower = Range.clip(drive - (turn / 2), -1.0, 1.0);
            }

            armPower = Range.clip(arm, -.5, .5);
            if (gamepad2.left_bumper) {
                armPower *= 2;
            }





            if (gamepad2.right_bumper) {
                if (gamepad2.a) {
                    ar = .875;
                } else if (gamepad2.b) {
                    ar = .25;
                } else if (gamepad2.x) {
                    ar = 1;
                } else if (gamepad2.y) {
                    ar = .3;
                }
            } else {
                if (gamepad2.a) {
                    ar = .75;
                } else if (gamepad2.b) {
                    ar = .75;
                } else if (gamepad2.x) {
                    ar = .875;
                } else if (gamepad2.y) {
                    ar = 1;
                }
            }
            servo.setPosition(ar);
            if (gamepad1.a) {
                open = true;
            }
            else if (gamepad1.x) {
                open = false;
            }
            if (open) {
                scoopServo.setPosition(60);
            }
            else {
                scoopServo.setPosition(120);
            }


                    // Tank Mode uses one stick to control each wheel.
                    // - This requires no math, but it is hard to drive forward slowly and keep straight.

                    //ideas for the servo to drop the gate and hold minerals in the ramp in the front of the bot
                    // leftPower  = -gamepad1.left_stick_y ;
                    // rightPower = -gamepad1.right_stick_y ;

                    // Send calculated power to wheelsss
            leftDrive.setPower(leftPower);
            rightDrive.setPower(rightPower);
            armMotor.setPower(armPower);



                // Show the elapsed game time and wheel power.
                telemetry.addData("Status", "Run Time: " + runtime.toString());
                telemetry.addData("Motors", "left (%.2f), right (%.2f)", leftPower, rightPower);
                telemetry.update();


            }
        }
    }


